package com.ecom.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ecom.beans.Category;
import com.ecom.beans.Product;
import com.ecom.service.CategorySeviceImpl;
import com.ecom.service.ProductService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/admin")
public class AdminController {

	Category category =new Category();

	@Autowired
	CategorySeviceImpl categoryService;
	
	@Autowired
	ProductService productService;

	@GetMapping("/")
	public String index() {
		return "admin/index";
	}

	@GetMapping("/addProduct")
	public String addProduct(Model m) {
		List<Category> categories = categoryService.getAllCategory();
		m.addAttribute("categories", categories);
		return "admin/addProduct";
	}

	@GetMapping("/addCategory")
	public String addCategory(Model m) {
		m.addAttribute("categorys",categoryService.getAllCategory());
		return "admin/addcategory";
	}


	@PostMapping("/saveCategory")
	public String saveCategory(@ModelAttribute Category category, @RequestParam("file") MultipartFile file ,HttpSession session) throws IOException {

		String imageName = file != null ? file.getOriginalFilename() : "default.jpg";
		category.setFileName(imageName);

		Boolean existCategory = categoryService.existCategory(category.getName());

		if (existCategory) {
			session.setAttribute("errorMsg", "Category Name already exists");
		} else {

			Category saveCategory = categoryService.saveCategory(category);

			if (ObjectUtils.isEmpty(saveCategory)) {
				session.setAttribute("errorMsg", "Not saved ! internal server error");
			} else {

				File saveFile = new ClassPathResource("static/img").getFile();

				Path path = Paths.get(saveFile.getAbsolutePath() + File.separator + "category_img" + File.separator
						+ file.getOriginalFilename());

				// System.out.println(path);
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

				session.setAttribute("succMsg", "Saved successfully");
			}
		}

		return "redirect:/admin/addCategory";
	}


	@GetMapping("/deleteCategory/{id}")
	public String deletecategory(@PathVariable int id,HttpSession session) {
		boolean deleteCategory = categoryService.deleteCategory(id);
		if(deleteCategory) {
			session.setAttribute("succMsg","category delete success");

		}else {
			session.setAttribute("errMsg","category delete error");

		}

		return "redirect:/admin/addCategory";

	}

	@GetMapping("/editCategory/{id}")
	public String editCategory(@PathVariable int id, Model model) {
		
		System.out.println("I reached to edit controller");
	    Category category = categoryService.getyCategoryById(id);
	    model.addAttribute("category", category);
	    return "/addCategory"; 
	}

	@PostMapping("/updateCategory")
	public String updateCategory(@ModelAttribute Category category ,@RequestParam("file") MultipartFile file,HttpSession session) {

		Category oldCategory = categoryService.getyCategoryById(category.getId());

		String imageName=file!=null ? file.getOriginalFilename() : oldCategory.getFileName();
		if(!ObjectUtils.isEmpty(oldCategory)) {

			oldCategory.setName(category.getName());
			oldCategory.setId(category.getId());
			oldCategory.setFileName(imageName);

		}
		Category updateCategory = categoryService.saveCategory(oldCategory);
		if(!ObjectUtils.isEmpty(updateCategory)) {
			System.out.println("  i am updated ");
		}else {
			System.out.println("Something Wrong on server");
		}
		
		return "redirect:/admin/addCategory/" + category.getId();
		
	}
	
	
	@PostMapping("/saveProduct")
	public String saveProduct(@ModelAttribute Product product, @RequestParam("file") MultipartFile image,
			HttpSession session) throws IOException {

		String imageName = image.isEmpty() ? "default.jpg" : image.getOriginalFilename();

		product.setImage(imageName);
		product.setDiscount(0);
		product.setDiscountPrice(product.getPrice());

		Product saveProduct = productService.saveProduct(product);

		if (!ObjectUtils.isEmpty(saveProduct)) {

//			File saveFile = new ClassPathResource("static/img").getFile();
//
//			Path path = Paths.get(saveFile.getAbsolutePath() + File.separator + "product_img" + File.separator
//					+ image.getOriginalFilename());
//
//			System.out.println(path);
//			Files.copy(image.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

			session.setAttribute("succMsg", "Product Saved Success");
		} else {
			session.setAttribute("errorMsg", "something wrong on server");
		}

		return "redirect:/admin/addProduct";
	}
	
	@GetMapping("/products")
	public String loadViewProduct(Model m) {
		m.addAttribute("products",productService.getAllProducts());
		return "admin/products";
	}
	
	@GetMapping("/deleteProduct/{id}")
	public String deleteProduct(
			@PathVariable int id,
			 HttpSession session) {
		
		boolean deleteProduct = productService.deleteProduct(id);
		if(deleteProduct){
			session.setAttribute("succMsg","Product delete success");	
		}else {
			session.setAttribute("errMsg","Product Failed to delete");
		}
		
		return "redirect:/admin/products";
	}
	
	@GetMapping("/editProduct/{id}")
	public String editProduct(@PathVariable int id,Model m) {
		
		m.addAttribute("product",productService.getProductById(id));
		m.addAttribute("categories",categoryService.getAllCategory());
		
		return "admin/editProduct";
	}
	
	@PostMapping("/updateProduct")
	public String updateProduct(@ModelAttribute Product product,@RequestParam("file") MultipartFile image, HttpSession session,Model m) {
		
	    Product updateProduct = productService.updateProduct(product, image);
	    
	    if(!ObjectUtils.isEmpty(updateProduct)) {
	    	session.setAttribute("succMsg","Product update success");
	    	
	    }else {
	    	session.setAttribute("errMsg","Product Failed to Update");
	    	
	    }
		
		return "redirect:/admin/editProduct/"+product.getId();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
